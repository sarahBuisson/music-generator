import { ContextType, getRandomFromBestsWhoRespect, getRandomTuneFromWhoRespect } from "./chooseNoteUtils";
import { Note } from "./Note";
export declare function fillWithNotesRespecting2(possibilites: Array<string>, rhythme: Array<any>, initTune?: string, filters?: Array<(n: string, n2: ContextType<string>) => boolean>, chooseMethode?: typeof getRandomFromBestsWhoRespect): Array<any>;
export declare function isStrictlyDescendante(notes: Array<Note>): boolean;
export declare function isStrictlyAscendante(notes: Array<Note>): boolean;
export declare function isMostlyDescendante(notes: Array<Note>): boolean;
export declare function isMostlyAscendante(notes: Array<Note>): boolean;
export declare function computeTuneDerivation(notes: Array<Note>): Array<number>;
export declare function numberOfChangeOfMovement(notes: Array<Note>): number;
export declare function fillWithNotesStrictlyDescendantes(_previousNoteTune: any, rhythme: any, possibilites: any, filters: Array<any>, chooseMethode?: typeof getRandomFromBestsWhoRespect): any[];
export declare function insertDisconnanceAndResolutionAtEnd(notes: Array<Note>, possibilites: Array<string>, chooseMethode?: typeof getRandomFromBestsWhoRespect): void;
export declare function insertResolutionAtEndIfNeed(notes: Array<Note>, possibilites: Array<string>, chooseMethode?: typeof getRandomFromBestsWhoRespect): void;
export declare function insertConsonnanteAtSecondeBeginingIfNeeded(notes: Array<Note>, possibilites: Array<string>, chooseMethode?: typeof getRandomTuneFromWhoRespect): void;
export declare function fillPatternWithNoteDescendantes(_previousNoteTune: any, mainRhytme: any, mainNotes: any, chooseNoteWhoRespect?: typeof getRandomTuneFromWhoRespect): any;
export declare function flatPartition(form: Array<any>): Array<Note>;
export declare function fillWithRandomNote(mainRhytme: any, mainNotes: any): any[];
export declare function fillWithRandomNoteEndedWithDissonanteConsonante(mainRhythme: any, mainNotes: any): any;
export declare function mapMultiLevel(array: Array<any>, callback: any): Array<any>;
export declare function fillWithNotesRespecting(possibilites: Array<string>, rhythme: Array<any>, initTune?: string, filters?: Array<(n: string, n2: ContextType<string>) => boolean>, chooseMethode?: typeof getRandomFromBestsWhoRespect): Array<any>;
export declare function derivationHarmonique(notes: Array<string>): Array<number>;
export declare function derivationRythme(notes: Array<string>): Array<number>;
export declare function extremumHarmonique(notes: Array<string>): any;
export declare function extremumRhyhtme(notes: Array<string>): any;
